using { /Fortnite.com/Characters }
using { /Fortnite.com/Devices }
using { /Fortnite.com/Game }
using { /Fortnite.com/UI }
using { /Verse.org/Simulation }
using { /Verse.org/Random }
using { /Verse.org/Assets }
using { /Verse.org/Colors }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /UnrealEngine.com/Temporary/UI }

StringToText<localizes>(String : string) : message = "{String}"

VotingUI := class(creative_device):
  

    @editable       StartTrigger : trigger_device = trigger_device{}
    @editable       Columns : type{_X : int where _X > 1, _X < 3} = 2
    @editable       VotingTime : type{ _X : int where _X >= 3, _X <= 60} = 30
    @editable       VoteOutcomes : []vote = array{}
    @editable       UISettings : ui_settings = ui_settings{}


    var VoteToCurrentVotes : [vote]int = map{}
    var MaxVotes : int = 0
    var CurrentVotes : int = 0
    var ImageSize : vector2 = vector2{}
    var RowsToUse : int = 1


    ExchangableUITextures : []texture = array:

        #UITextures.VoteFall
    
        
    VoteEndedEvent<private> : event() = event(){}
    PlayerSelectionEvent<private> : event(button_selection_result) = event(button_selection_result){}


    OnBegin<override>()<suspends> : void =
        loop:
            StartTrigger.TriggeredEvent.Await()
            InitializeVotingSelection(GetPlayspace().GetPlayers())
            

    InitializeVotingSelection<public>(Players : []player)<suspends> : void =
        Sleep(0.0)
        set RowsToUse = Ceil[1.0 * VoteOutcomes.Length /  (1.0 * Columns)] or 4
        set ImageSize = (560.0 / (1.0 * RowsToUse)) * vector2{ X := 1.0, Y := 1.0}
        set MaxVotes = Players.Length
        set CurrentVotes = 0
        for (Loadout : VoteOutcomes, set VoteToCurrentVotes[Loadout] = 0) {}
        
        for ( Player : Players):
            spawn{ PresentSelectionUI(Player) }
        VoteEndedEvent.Await()
        WinningTrigger := CalculateMostVotes()
        for ( Player : Players):
            WinningTrigger.TriggerDevice.Trigger(Player)


    PresentSelectionUI<private>(Player : player)<suspends> : void =
        var SelectionButtons : []button_quiet = array{}

        for ( Loadout : VoteOutcomes):
            set SelectionButtons += array:
                button_quiet:
                    DefaultText := StringToText("0")
            
        if ( PlayerUI := GetPlayerUI[Player]):
            var TimeRemaining : int = int[VotingTime] or 10
            TimerTextBlock := MakeTextBlock("Voting ends in {TimeRemaining}", UISettings.TimerTextColor, UISettings.TimerTextShadowColor, vector2{ X := 4.0, Y := 4.0})

            branch:
                loop:
                    Sleep(1.0)
                    set TimeRemaining -= 1
                    TimerTextBlock.SetText(StringToText("Voting ends in {TimeRemaining}"))
                    if (TimeRemaining <= 0) then VoteEndedEvent.Signal()
            Canvas : canvas = canvas:
                Slots := array:
                    canvas_slot:
                        Widget := ConstructMainUI(SelectionButtons, TimerTextBlock)
                        Offsets := margin{ Left := 960.0, Top := 50.0}
                        Alignment := vector2{ X := 0.5, Y := 0.0}
            PlayerUI.AddWidget(Canvas, player_ui_slot{ InputMode := ui_input_mode.All})
            
            TriggerButtonPressedEvent : event() = event(){}
            for ( Index->Button : SelectionButtons, Loadout := VoteOutcomes[Index]) { spawn{Button.AwaitSelection(Loadout, Index, TriggerButtonPressedEvent)}}

            race:
                block:
                    VoteEndedEvent.Await()
                loop:
                    SelectionResult := PlayerSelectionEvent.Await()
                    if ( Player = SelectionResult.Player):
                        TriggerButtonPressedEvent.Signal()
                    if ( Loadout := VoteOutcomes[SelectionResult.Index], Votes := VoteToCurrentVotes[Loadout], ButtonToUpdate := SelectionButtons[SelectionResult.Index]):
                        
                        ButtonToUpdate.SetText(StringToText("{Votes}"))
                   
            Sleep(1.0)
            PlayerUI.RemoveWidget(Canvas)


    ConstructMainUI<private>(Buttons : []text_button_base, TimerTextBlock : text_block) : stack_box =
        MainStackBox := stack_box:
            Orientation := orientation.Vertical
            Slots := array:
                stack_box_slot{Widget := TimerTextBlock, HorizontalAlignment := horizontal_alignment.Center}
        RowStackBoxes : []stack_box = for ( I := 0..RowsToUse - 1) {stack_box{Orientation := orientation.Horizontal}}
        var CurrentRowToUse : int = 0
        for ( Index->Button : Buttons, Vote := VoteOutcomes[Index], StackBox := RowStackBoxes[CurrentRowToUse]):
            StackBox.AddWidget(
                stack_box_slot:
                    Widget := ConstructVoteStackBox(Index, Button, Vote.Name )
                    HorizontalAlignment := horizontal_alignment.Center
                    VerticalAlignment := vertical_alignment.Center
                    Padding := margin{ Left := ImageSize.X * 0.075 , Right := ImageSize.X * 0.075}
            )
            
            if ( Mod[Index, Columns] = Columns - 1):
                set CurrentRowToUse += 1

        for ( RowStackBox : RowStackBoxes):
            MainStackBox.AddWidget(
                stack_box_slot:
                    Widget := RowStackBox
                    HorizontalAlignment := horizontal_alignment.Center
                    VerticalAlignment := vertical_alignment.Center
                    Padding := margin{ Top := ImageSize.X * 0.04, Bottom := ImageSize.X * 0.04}
            )
        return MainStackBox


    ConstructVoteStackBox(Index : int, Button : text_button_base, VoteName : string) : stack_box = 
        stack_box:
            Orientation := orientation.Vertical
            Slots := array:

                stack_box_slot:
                    Widget := MakeTextBlock(VoteName, UISettings.VoteTextColor, UISettings.VoteTextShadowColor, vector2{ X := 4.0, Y := 4.0})
                    HorizontalAlignment := horizontal_alignment.Center

                stack_box_slot:
                    Widget := overlay:
                        Slots := array:
                            overlay_slot:
                                Widget := color_block{ DefaultDesiredSize := ImageSize, DefaultColor := UISettings.BorderColor, DefaultOpacity := if (UISettings.UseBorder?) then 1.0 else 0.0}
                            overlay_slot:
                                Widget := color_block{ DefaultDesiredSize := ImageSize * 0.9, DefaultColor := UISettings.BackgroundColor, DefaultOpacity := if (UISettings.UseBorder?) then 1.0 else 0.0}
                            overlay_slot:
                                Widget := GetImageWidget(Index)
                    HorizontalAlignment := horizontal_alignment.Center
                    Padding := margin{Bottom := ImageSize.X * 0.025}

                stack_box_slot:
                    Widget := Button
                    HorizontalAlignment := horizontal_alignment.Fill
                    Distribution := option{5.0}


    (Button : text_button_base).AwaitSelection(Vote : vote, ButtonIndex : int, SelectionMadeEvent : event())<suspends> : void =
        race:
            block:
                SelectionMadeEvent.Await()
                return
            block:
                WidgetMessage := Button.OnClick().Await()
                if ( set VoteToCurrentVotes[Vote] += 1) {}
                PlayerSelectionEvent.Signal(button_selection_result{ Player := WidgetMessage.Player, Index := ButtonIndex})
                
            block:
                Time := 1.0 * int[VotingTime] or 10.0
                Sleep(Time)
                return
        set CurrentVotes += 1
        if ( CurrentVotes >= MaxVotes ) then VoteEndedEvent.Signal()  


    CalculateMostVotes() : vote =
        var GreatestVote : int = 0
        var WinningVote : vote = vote{}
        for ( Option->Vote : VoteToCurrentVotes):
            if ( Vote > GreatestVote) :
                set GreatestVote = Vote
                set WinningVote = Option
            if ( Vote = GreatestVote, GetRandomInt(1,2) = 1):
                set WinningVote = Option
        return WinningVote


    GetImageWidget(Index : int) : widget =
        if ( Texture := ExchangableUITextures[Index]):
            return texture_block:
                DefaultImage := Texture
                DefaultDesiredSize := 0.9 * ImageSize
        else:
            return color_block:
                DefaultColor := UISettings.BackgroundColor
                DefaultDesiredSize := 0.9 * ImageSize


    MakeTextBlock(Text : string, Color : color, ShadowColor : color, ShadowOffset : vector2) : text_block =
        NewTextBlock := text_block:
            DefaultText := StringToText(Text)
            DefaultTextColor := Color
            DefaultShadowColor := ShadowColor
            DefaultShadowOffset := option{ ShadowOffset }
        NewTextBlock.SetShadowOpacity(1.0)
        return NewTextBlock
        

vote := class<concrete><unique>:
    @editable       Name : string = " "
    @editable       TriggerDevice : trigger_device = trigger_device{}


button_selection_result := struct:
    Player : player
    Index : int


ui_settings := class<concrete>:
    @editable       UseBorder : logic = false
    @editable       BackgroundColor : color = NamedColors.Black
    @editable       BorderColor : color = NamedColors.White
    @editable       TimerTextColor : color = NamedColors.White
    @editable       TimerTextShadowColor : color = NamedColors.Black
    @editable       VoteTextColor : color = NamedColors.White
    @editable       VoteTextShadowColor : color = NamedColors.Black
